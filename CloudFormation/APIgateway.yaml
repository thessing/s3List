AWSTemplateFormatVersion: '2010-09-09'
Description: Creates API and resources to run as

Parameters:
# ----------- Resource Details ----------- #
  ResourceName:
    Description: Name for the Resource
    AllowedPattern: ^([A-Za-z0-9_-]*)?$
    Type: String
  Creator:
    Description: Creator's Name
    AllowedPattern: ^([A-Za-z ]*)?$
    Type: String
  CommonName:
    Description: Friendly name to create in DNS (friendlyname) [no space or specical characters] (friendlyname.iopcloud.ohio.gov)
    AllowedPattern: ^([A-Za-z0-9_-]*)?$
    Type: String
  LambdaARN:
    Description: ARN for Lambda Function the API will proxy.
    Type: String

Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Rest API Lambda Integration
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub ${ResourceName}-${AWS::Region}-${AWS::AccountId}
      Tags:
        - Key: ResourceName
          Value: !Sub ${ResourceName}-${AWS::Region}-${AWS::AccountId}
        - Key: Creator
          Value: !Ref Creator

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: !Ref ResourceName
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000 # 29 second timeout, which is the max 50 milli seconds is the least
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaARN}/invocations'
      OperationName: 'datadownload'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: BDD Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'
      MethodSettings: 
        - ResourcePath: /*
          HttpMethod: '*'
          LoggingLevel: INFO
      Tags:
        - Key: ResourceName
          Value: !Sub ${ResourceName}-${AWS::Region}-${AWS::AccountId}
        - Key: Creator
          Value: !Ref Creator

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !Ref LambdaARN
      Tags:
        - Key: ResourceName
          Value: !Sub ${ResourceName}-LambdaAPI-${AWS::Region}-${AWS::AccountId}
        - Key: Creator
          Value: !Ref Creator

Outputs:
  APIlid:
    Value: !Ref ApiGatewayRestApi
    Description:  API Logical ID
  APIStagelid:
    Value: !Ref ApiGatewayStage
    Description:  API Stage Logical ID
